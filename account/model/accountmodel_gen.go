// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountFieldNames          = builder.RawFieldNames(&Account{}, true)
	accountRows                = strings.Join(accountFieldNames, ",")
	accountRowsExpectAutoSet   = strings.Join(stringx.Remove(accountFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	accountRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(accountFieldNames, "phone", "create_time", "update_time", "create_at", "update_at"))
)

type (
	accountModel interface {
		Insert(ctx context.Context, data *Account) (sql.Result, error)
		FindOne(ctx context.Context, phone int64) (*Account, error)
		Update(ctx context.Context, data *Account) error
		Delete(ctx context.Context, phone int64) error
	}

	defaultAccountModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Account struct {
		Phone   int64  `db:"phone"`
		AppId   int64  `db:"app_id"`
		AppHash string `db:"app_hash"`
		Session string `db:"session"`
	}
)

func newAccountModel(conn sqlx.SqlConn) *defaultAccountModel {
	return &defaultAccountModel{
		conn:  conn,
		table: `"public"."account"`,
	}
}

func (m *defaultAccountModel) Delete(ctx context.Context, phone int64) error {
	query := fmt.Sprintf("delete from %s where phone = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, phone)
	return err
}

func (m *defaultAccountModel) FindOne(ctx context.Context, phone int64) (*Account, error) {
	query := fmt.Sprintf("select %s from %s where phone = $1 limit 1", accountRows, m.table)
	var resp Account
	err := m.conn.QueryRowCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountModel) Insert(ctx context.Context, data *Account) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, accountRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Phone, data.AppId, data.AppHash, data.Session)
	return ret, err
}

func (m *defaultAccountModel) Update(ctx context.Context, data *Account) error {
	query := fmt.Sprintf("update %s set %s where phone = $1", m.table, accountRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Phone, data.AppId, data.AppHash, data.Session)
	return err
}

func (m *defaultAccountModel) tableName() string {
	return m.table
}
